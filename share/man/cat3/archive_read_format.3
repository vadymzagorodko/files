ARCHIVE_READ_FORMAT(3)   BSD Library Functions Manual   ARCHIVE_READ_FORMAT(3)

NNAAMMEE
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__77zziipp, aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__aallll,
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__aarr, aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__bbyy__ccooddee,
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__ccaabb, aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__ccppiioo,
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__eemmppttyy, aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__iissoo99666600,
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__llhhaa, aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__mmttrreeee,,
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__rraarr,, aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__rraaww,,
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__ttaarr, aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__xxaarr,
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__zziipp -- functions for reading streaming ar-
     chives

LLIIBBRRAARRYY
     Streaming Archive Library (libarchive, -larchive)

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<aarrcchhiivvee..hh>>

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__77zziipp(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__aallll(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__aarr(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__bbyy__ccooddee(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _i_n_t);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__ccaabb(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__ccppiioo(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__eemmppttyy(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__iissoo99666600(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__llhhaa(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__mmttrreeee(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__rraarr(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__rraaww(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__ttaarr(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__xxaarr(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__zziipp(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

DDEESSCCRRIIPPTTIIOONN
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__77zziipp(), aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__aarr(),
             aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__ccaabb(),
             aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__ccppiioo(),
             aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__iissoo99666600(),
             aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__llhhaa(),
             aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__mmttrreeee(),
             aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__rraarr(),
             aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__rraaww(),
             aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__ttaarr(),
             aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__xxaarr(),
             aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__zziipp()
             Enables support---including auto-detection code---for the speci-
             fied archive format.  For example,
             aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__ttaarr() enables support for a variety
             of standard tar formats, old-style tar, ustar, pax interchange
             format, and many common variants.
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__aallll()
             Enables support for all available formats except the ``raw'' for-
             mat (see below).
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__bbyy__ccooddee()
             Enables a single format specified by the format code.  This can
             be useful when reading a single archive twice; use
             aarrcchhiivvee__ffoorrmmaatt() after reading the first time and pass the
             resulting code to this function to selectively enable only the
             necessary format support.  Note:  In statically-linked executa-
             bles, this will cause your program to include support for every
             format.  If executable size is a concern, you may wish to avoid
             using this function.
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__eemmppttyy()
             Enables support for treating empty files as empty archives.
             Because empty files are valid for several different formats, it
             is not possible to accurately determine a format for an empty
             file based purely on contents.  So empty files are treated by
             libarchive as a distinct format.
     aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__rraaww()
             The ``raw'' format handler allows libarchive to be used to read
             arbitrary data.  It treats any data stream as an archive with a
             single entry.  The pathname of this entry is ``data''; all other
             entry fields are unset.  This is not enabled by
             aarrcchhiivvee__rreeaadd__ssuuppppoorrtt__ffoorrmmaatt__aallll() in order to avoid erroneous
             handling of damaged archives.

RREETTUURRNN VVAALLUUEESS
     These functions return AARRCCHHIIVVEE__OOKK on success, or AARRCCHHIIVVEE__FFAATTAALL.

EERRRROORRSS
     Detailed error codes and textual descriptions are available from the
     aarrcchhiivvee__eerrrrnnoo() and aarrcchhiivvee__eerrrroorr__ssttrriinngg() functions.

SSEEEE AALLSSOO
     tar(1), libarchive(3), archive_read_data(3), archive_read_filter(3),
     archive_read_set_options(3), archive_util(3), tar(5)

BBUUGGSS
     Many traditional archiver programs treat empty files as valid empty ar-
     chives.  For example, many implementations of tar(1) allow you to append
     entries to an empty file.  Of course, it is impossible to determine the
     format of an empty file by inspecting the contents, so this library
     treats empty files as having a special ``empty'' format.

     Using the ``raw'' handler together with any other handler will often work
     but can produce surprising results.

BSD                            February 2, 2012                            BSD
