ARCHIVE_UTIL(3)          BSD Library Functions Manual          ARCHIVE_UTIL(3)

NNAAMMEE
     aarrcchhiivvee__cclleeaarr__eerrrroorr, aarrcchhiivvee__ccoommpprreessssiioonn, aarrcchhiivvee__ccoommpprreessssiioonn__nnaammee,
     aarrcchhiivvee__ccooppyy__eerrrroorr, aarrcchhiivvee__eerrrrnnoo, aarrcchhiivvee__eerrrroorr__ssttrriinngg,
     aarrcchhiivvee__ffiillee__ccoouunntt, aarrcchhiivvee__ffiilltteerr__ccooddee, aarrcchhiivvee__ffiilltteerr__ccoouunntt,
     aarrcchhiivvee__ffiilltteerr__nnaammee, aarrcchhiivvee__ffoorrmmaatt, aarrcchhiivvee__ffoorrmmaatt__nnaammee,
     aarrcchhiivvee__ppoossiittiioonn, aarrcchhiivvee__sseett__eerrrroorr -- libarchive utility functions

LLIIBBRRAARRYY
     Streaming Archive Library (libarchive, -larchive)

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<aarrcchhiivvee..hh>>

     _v_o_i_d
     aarrcchhiivvee__cclleeaarr__eerrrroorr(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__ccoommpprreessssiioonn(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _c_o_n_s_t _c_h_a_r _*
     aarrcchhiivvee__ccoommpprreessssiioonn__nnaammee(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _v_o_i_d
     aarrcchhiivvee__ccooppyy__eerrrroorr(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__eerrrrnnoo(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _c_o_n_s_t _c_h_a_r _*
     aarrcchhiivvee__eerrrroorr__ssttrriinngg(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__ffiillee__ccoouunntt(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t
     aarrcchhiivvee__ffiilltteerr__ccooddee(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _i_n_t);

     _i_n_t
     aarrcchhiivvee__ffiilltteerr__ccoouunntt(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _i_n_t);

     _c_o_n_s_t _c_h_a_r _*
     aarrcchhiivvee__ffiilltteerr__nnaammee(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _i_n_t);

     _i_n_t
     aarrcchhiivvee__ffoorrmmaatt(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _c_o_n_s_t _c_h_a_r _*
     aarrcchhiivvee__ffoorrmmaatt__nnaammee(_s_t_r_u_c_t _a_r_c_h_i_v_e _*);

     _i_n_t_6_4___t
     aarrcchhiivvee__ppoossiittiioonn(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _i_n_t);

     _v_o_i_d
     aarrcchhiivvee__sseett__eerrrroorr(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _i_n_t _e_r_r_o_r___c_o_d_e, _c_o_n_s_t _c_h_a_r _*_f_m_t,
         _._._.);

DDEESSCCRRIIPPTTIIOONN
     These functions provide access to various information about the struct
     archive object used in the libarchive(3) library.
     aarrcchhiivvee__cclleeaarr__eerrrroorr()
             Clears any error information left over from a previous call.  Not
             generally used in client code.
     aarrcchhiivvee__ccoommpprreessssiioonn()
             Synonym for aarrcchhiivvee__ffiilltteerr__ccooddee((aa,,(_0_)).
     aarrcchhiivvee__ccoommpprreessssiioonn__nnaammee()
             Synonym for aarrcchhiivvee__ffiilltteerr__nnaammee((aa,,(_0_)).
     aarrcchhiivvee__ccooppyy__eerrrroorr()
             Copies error information from one archive to another.
     aarrcchhiivvee__eerrrrnnoo()
             Returns a numeric error code (see errno(2)) indicating the reason
             for the most recent error return.  Note that this can not be
             reliably used to detect whether an error has occurred.  It should
             be used only after another libarchive function has returned an
             error status.
     aarrcchhiivvee__eerrrroorr__ssttrriinngg()
             Returns a textual error message suitable for display.  The error
             message here is usually more specific than that obtained from
             passing the result of aarrcchhiivvee__eerrrrnnoo() to strerror(3).
     aarrcchhiivvee__ffiillee__ccoouunntt()
             Returns a count of the number of files processed by this archive
             object.  The count is incremented by calls to
             archive_write_header(3) or archive_read_next_header(3).
     aarrcchhiivvee__ffiilltteerr__ccooddee()
             Returns a numeric code identifying the indicated filter.  See
             aarrcchhiivvee__ffiilltteerr__ccoouunntt() for details of the numbering.
     aarrcchhiivvee__ffiilltteerr__ccoouunntt()
             Returns the number of filters in the current pipeline.  For read
             archive handles, these filters are added automatically by the
             automatic format detection.  For write archive handles, these
             filters are added by calls to the various
             aarrcchhiivvee__wwrriittee__aadddd__ffiilltteerr__XXXXXX() functions.  Filters in the result-
             ing pipeline are numbered so that filter 0 is the filter closest
             to the format handler.  As a convenience, functions that expect a
             filter number will accept -1 as a synonym for the highest-num-
             bered filter.

             For example, when reading a uuencoded gzipped tar archive, there
             are three filters: filter 0 is the gunzip filter, filter 1 is the
             uudecode filter, and filter 2 is the pseudo-filter that wraps the
             archive read functions.  In this case, requesting
             aarrcchhiivvee__ppoossiittiioonn((aa,,(_-_1_)) would be a synonym for
             aarrcchhiivvee__ppoossiittiioonn((aa,,(_2_)) which would return the number of bytes
             currently read from the archive, while aarrcchhiivvee__ppoossiittiioonn((aa,,(_1_))
             would return the number of bytes after uudecoding, and
             aarrcchhiivvee__ppoossiittiioonn((aa,,(_0_)) would return the number of bytes after
             decompression.
     aarrcchhiivvee__ffiilltteerr__nnaammee()
             Returns a textual name identifying the indicated filter.  See
             aarrcchhiivvee__ffiilltteerr__ccoouunntt() for details of the numbering.
     aarrcchhiivvee__ffoorrmmaatt()
             Returns a numeric code indicating the format of the current ar-
             chive entry.  This value is set by a successful call to
             aarrcchhiivvee__rreeaadd__nneexxtt__hheeaaddeerr().  Note that it is common for this
             value to change from entry to entry.  For example, a tar archive
             might have several entries that utilize GNU tar extensions and
             several entries that do not.  These entries will have different
             format codes.
     aarrcchhiivvee__ffoorrmmaatt__nnaammee()
             A textual description of the format of the current entry.
     aarrcchhiivvee__ppoossiittiioonn()
             Returns the number of bytes read from or written to the indicated
             filter.  In particular, aarrcchhiivvee__ppoossiittiioonn((aa,,(_0_)) returns the num-
             ber of bytes read or written by the format handler, while
             aarrcchhiivvee__ppoossiittiioonn((aa,,(_-_1_)) returns the number of bytes read or
             written to the archive.  See aarrcchhiivvee__ffiilltteerr__ccoouunntt() for details
             of the numbering here.
     aarrcchhiivvee__sseett__eerrrroorr()
             Sets the numeric error code and error description that will be
             returned by aarrcchhiivvee__eerrrrnnoo() and aarrcchhiivvee__eerrrroorr__ssttrriinngg().  This
             function should be used within I/O callbacks to set system-spe-
             cific error codes and error descriptions.  This function accepts
             a printf-like format string and arguments.  However, you should
             be careful to use only the following printf format specifiers:
             ``%c'', ``%d'', ``%jd'', ``%jo'', ``%ju'', ``%jx'', ``%ld'',
             ``%lo'', ``%lu'', ``%lx'', ``%o'', ``%u'', ``%s'', ``%x'',
             ``%%''.  Field-width specifiers and other printf features are not
             uniformly supported and should not be used.

SSEEEE AALLSSOO
     archive_read(3), archive_write(3), libarchive(3), printf(3)

HHIISSTTOORRYY
     The lliibbaarrcchhiivvee library first appeared in FreeBSD 5.3.

AAUUTTHHOORRSS
     The lliibbaarrcchhiivvee library was written by Tim Kientzle <kientzle@acm.org>.

BSD                            February 2, 2012                            BSD
