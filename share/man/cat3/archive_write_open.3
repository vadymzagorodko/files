ARCHIVE_WRITE_OPEN(3)    BSD Library Functions Manual    ARCHIVE_WRITE_OPEN(3)

NNAAMMEE
     aarrcchhiivvee__wwrriittee__ooppeenn, aarrcchhiivvee__wwrriittee__ooppeenn__ffdd, aarrcchhiivvee__wwrriittee__ooppeenn__FFIILLEE,
     aarrcchhiivvee__wwrriittee__ooppeenn__ffiilleennaammee, aarrcchhiivvee__wwrriittee__ooppeenn__mmeemmoorryy -- functions for
     creating archives

LLIIBBRRAARRYY
     Streaming Archive Library (libarchive, -larchive)

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<aarrcchhiivvee..hh>>

     _i_n_t
     aarrcchhiivvee__wwrriittee__ooppeenn(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _v_o_i_d _*_c_l_i_e_n_t___d_a_t_a,
         _a_r_c_h_i_v_e___o_p_e_n___c_a_l_l_b_a_c_k _*, _a_r_c_h_i_v_e___w_r_i_t_e___c_a_l_l_b_a_c_k _*,
         _a_r_c_h_i_v_e___c_l_o_s_e___c_a_l_l_b_a_c_k _*);

     _i_n_t
     aarrcchhiivvee__wwrriittee__ooppeenn__ffdd(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _i_n_t _f_d);

     _i_n_t
     aarrcchhiivvee__wwrriittee__ooppeenn__FFIILLEE(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _F_I_L_E _*_f_i_l_e);

     _i_n_t
     aarrcchhiivvee__wwrriittee__ooppeenn__ffiilleennaammee(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _c_o_n_s_t _c_h_a_r _*_f_i_l_e_n_a_m_e);

     _i_n_t
     aarrcchhiivvee__wwrriittee__ooppeenn__mmeemmoorryy(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _v_o_i_d _*_b_u_f_f_e_r,
         _s_i_z_e___t _b_u_f_f_e_r_S_i_z_e, _s_i_z_e___t _*_o_u_t_U_s_e_d);

DDEESSCCRRIIPPTTIIOONN
     aarrcchhiivvee__wwrriittee__ooppeenn()
             Freeze the settings, open the archive, and prepare for writing
             entries.  This is the most generic form of this function, which
             accepts pointers to three callback functions which will be
             invoked by the compression layer to write the constructed ar-
             chive.  This does not alter the default archive padding.

     aarrcchhiivvee__wwrriittee__ooppeenn__ffdd()
             A convenience form of aarrcchhiivvee__wwrriittee__ooppeenn() that accepts a file
             descriptor.  The aarrcchhiivvee__wwrriittee__ooppeenn__ffdd() function is safe for use
             with tape drives or other block-oriented devices.

     aarrcchhiivvee__wwrriittee__ooppeenn__FFIILLEE()
             A convenience form of aarrcchhiivvee__wwrriittee__ooppeenn() that accepts a _F_I_L_E _*
             pointer.  Note that aarrcchhiivvee__wwrriittee__ooppeenn__FFIILLEE() is not safe for
             writing to tape drives or other devices that require correct
             blocking.

     aarrcchhiivvee__wwrriittee__ooppeenn__ffiillee()
             A deprecated synonym for aarrcchhiivvee__wwrriittee__ooppeenn__ffiilleennaammee().

     aarrcchhiivvee__wwrriittee__ooppeenn__ffiilleennaammee()
             A convenience form of aarrcchhiivvee__wwrriittee__ooppeenn() that accepts a file-
             name.  A NULL argument indicates that the output should be writ-
             ten to standard output; an argument of ``-'' will open a file
             with that name.  If you have not invoked
             aarrcchhiivvee__wwrriittee__sseett__bbyytteess__iinn__llaasstt__bblloocckk(), then
             aarrcchhiivvee__wwrriittee__ooppeenn__ffiilleennaammee() will adjust the last-block padding
             depending on the file: it will enable padding when writing to
             standard output or to a character or block device node, it will
             disable padding otherwise.  You can override this by manually
             invoking aarrcchhiivvee__wwrriittee__sseett__bbyytteess__iinn__llaasstt__bblloocckk() before calling
             aarrcchhiivvee__wwrriittee__ooppeenn().  The aarrcchhiivvee__wwrriittee__ooppeenn__ffiilleennaammee() function
             is safe for use with tape drives or other block-oriented devices.

     aarrcchhiivvee__wwrriittee__ooppeenn__mmeemmoorryy()
             A convenience form of aarrcchhiivvee__wwrriittee__ooppeenn() that accepts a pointer
             to a block of memory that will receive the archive.  The final
             _s_i_z_e___t _* argument points to a variable that will be updated after
             each write to reflect how much of the buffer is currently in use.
             You should be careful to ensure that this variable remains allo-
             cated until after the archive is closed.  This function will dis-
             able padding unless you have specifically set the block size.
     More information about the _s_t_r_u_c_t _a_r_c_h_i_v_e object and the overall design
     of the library can be found in the libarchive(3) overview.

     Note that the convenience forms above vary in how they block the output.
     See archive_write_blocksize(3) if you need to control the block size used
     for writes or the end-of-file padding behavior.

CCLLIIEENNTT CCAALLLLBBAACCKKSS
     To use this library, you will need to define and register callback func-
     tions that will be invoked to write data to the resulting archive.  These
     functions are registered by calling aarrcchhiivvee__wwrriittee__ooppeenn():

           _t_y_p_e_d_e_f _i_n_t aarrcchhiivvee__ooppeenn__ccaallllbbaacckk(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _v_o_i_d
           _*_c_l_i_e_n_t___d_a_t_a)

     The open callback is invoked by aarrcchhiivvee__wwrriittee__ooppeenn().  It should return
     AARRCCHHIIVVEE__OOKK if the underlying file or data source is successfully opened.
     If the open fails, it should call aarrcchhiivvee__sseett__eerrrroorr() to register an
     error code and message and return AARRCCHHIIVVEE__FFAATTAALL.

           _t_y_p_e_d_e_f _l_a___s_s_i_z_e___t aarrcchhiivvee__wwrriittee__ccaallllbbaacckk(_s_t_r_u_c_t _a_r_c_h_i_v_e _*,
           _v_o_i_d _*_c_l_i_e_n_t___d_a_t_a, _c_o_n_s_t _v_o_i_d _*_b_u_f_f_e_r, _s_i_z_e___t _l_e_n_g_t_h)

     The write callback is invoked whenever the library needs to write raw
     bytes to the archive.  For correct blocking, each call to the write call-
     back function should translate into a single write(2) system call.  This
     is especially critical when writing archives to tape drives.  On success,
     the write callback should return the number of bytes actually written.
     On error, the callback should invoke aarrcchhiivvee__sseett__eerrrroorr() to register an
     error code and message and return -1.

           _t_y_p_e_d_e_f _i_n_t aarrcchhiivvee__cclloossee__ccaallllbbaacckk(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _v_o_i_d
           _*_c_l_i_e_n_t___d_a_t_a)

     The close callback is invoked by archive_close when the archive process-
     ing is complete.  The callback should return AARRCCHHIIVVEE__OOKK on success.  On
     failure, the callback should invoke aarrcchhiivvee__sseett__eerrrroorr() to register an
     error code and message and return AARRCCHHIIVVEE__FFAATTAALL..

     Note that if the client-provided write callback function returns a non-
     zero value, that error will be propagated back to the caller through
     whatever API function resulted in that call, which may include
     aarrcchhiivvee__wwrriittee__hheeaaddeerr(), aarrcchhiivvee__wwrriittee__ddaattaa(), aarrcchhiivvee__wwrriittee__cclloossee(),
     aarrcchhiivvee__wwrriittee__ffiinniisshh(), or aarrcchhiivvee__wwrriittee__ffrreeee().  The client callback can
     call aarrcchhiivvee__sseett__eerrrroorr() to provide values that can then be retrieved by
     aarrcchhiivvee__eerrrrnnoo() and aarrcchhiivvee__eerrrroorr__ssttrriinngg().

RREETTUURRNN VVAALLUUEESS
     These functions return AARRCCHHIIVVEE__OOKK on success, or AARRCCHHIIVVEE__FFAATTAALL.

EERRRROORRSS
     Detailed error codes and textual descriptions are available from the
     aarrcchhiivvee__eerrrrnnoo() and aarrcchhiivvee__eerrrroorr__ssttrriinngg() functions.

SSEEEE AALLSSOO
     tar(1), libarchive(3), archive_write(3), archive_write_blocksize(3),
     archive_write_filter(3), archive_write_format(3), archive_write_new(3),
     archive_write_set_options(3), cpio(5), mtree(5), tar(5)

BSD                            February 2, 2012                            BSD
