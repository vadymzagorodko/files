ARCHIVE_READ_EXTRACT(3)  BSD Library Functions Manual  ARCHIVE_READ_EXTRACT(3)

NNAAMMEE
     aarrcchhiivvee__rreeaadd__eexxttrraacctt, aarrcchhiivvee__rreeaadd__eexxttrraacctt22,
     aarrcchhiivvee__rreeaadd__eexxttrraacctt__sseett__pprrooggrreessss__ccaallllbbaacckk -- functions for reading
     streaming archives

LLIIBBRRAARRYY
     Streaming Archive Library (libarchive, -larchive)

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<aarrcchhiivvee..hh>>

     _i_n_t
     aarrcchhiivvee__rreeaadd__eexxttrraacctt(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*,
         _i_n_t _f_l_a_g_s);

     _i_n_t
     aarrcchhiivvee__rreeaadd__eexxttrraacctt22(_s_t_r_u_c_t _a_r_c_h_i_v_e _*_s_r_c, _s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*,
         _s_t_r_u_c_t _a_r_c_h_i_v_e _*_d_e_s_t);

     _v_o_i_d
     aarrcchhiivvee__rreeaadd__eexxttrraacctt__sseett__pprrooggrreessss__ccaallllbbaacckk(_s_t_r_u_c_t _a_r_c_h_i_v_e _*,
         _v_o_i_d _(_*_f_u_n_c_)_(_v_o_i_d _*_), _v_o_i_d _*_u_s_e_r___d_a_t_a);

DDEESSCCRRIIPPTTIIOONN
     aarrcchhiivvee__rreeaadd__eexxttrraacctt(), aarrcchhiivvee__rreeaadd__eexxttrraacctt__sseett__sskkiipp__ffiillee()
             A convenience function that wraps the corresponding
             archive_write_disk(3) interfaces.  The first call to
             aarrcchhiivvee__rreeaadd__eexxttrraacctt() creates a restore object using
             archive_write_disk_new(3) and
             archive_write_disk_set_standard_lookup(3), then transparently
             invokes archive_write_disk_set_options(3),
             archive_write_header(3), archive_write_data(3), and
             archive_write_finish_entry(3) to create the entry on disk and
             copy data into it.  The _f_l_a_g_s argument is passed unmodified to
             archive_write_disk_set_options(3).
     aarrcchhiivvee__rreeaadd__eexxttrraacctt22()
             This is another version of aarrcchhiivvee__rreeaadd__eexxttrraacctt() that allows you
             to provide your own restore object.  In particular, this allows
             you to override the standard lookup functions using
             archive_write_disk_set_group_lookup(3), and
             archive_write_disk_set_user_lookup(3).  Note that
             aarrcchhiivvee__rreeaadd__eexxttrraacctt22() does not accept a _f_l_a_g_s argument; you
             should use aarrcchhiivvee__wwrriittee__ddiisskk__sseett__ooppttiioonnss() to set the restore
             options yourself.
     aarrcchhiivvee__rreeaadd__eexxttrraacctt__sseett__pprrooggrreessss__ccaallllbbaacckk()
             Sets a pointer to a user-defined callback that can be used for
             updating progress displays during extraction.  The progress func-
             tion will be invoked during the extraction of large regular
             files.  The progress function will be invoked with the pointer
             provided to this call.  Generally, the data pointed to should
             include a reference to the archive object and the archive_entry
             object so that various statistics can be retrieved for the
             progress display.

RREETTUURRNN VVAALLUUEESS
     Most functions return zero on success, non-zero on error.  The possible
     return codes include: AARRCCHHIIVVEE__OOKK (the operation succeeded), AARRCCHHIIVVEE__WWAARRNN
     (the operation succeeded but a non-critical error was encountered),
     AARRCCHHIIVVEE__EEOOFF (end-of-archive was encountered), AARRCCHHIIVVEE__RREETTRRYY (the opera-
     tion failed but can be retried), and AARRCCHHIIVVEE__FFAATTAALL (there was a fatal
     error; the archive should be closed immediately).

EERRRROORRSS
     Detailed error codes and textual descriptions are available from the
     aarrcchhiivvee__eerrrrnnoo() and aarrcchhiivvee__eerrrroorr__ssttrriinngg() functions.

SSEEEE AALLSSOO
     tar(1), libarchive(3), archive_read(3), archive_read_data(3),
     archive_read_filter(3), archive_read_format(3), archive_read_open(3),
     archive_read_set_options(3), archive_util(3), tar(5)

BSD                            February 2, 2012                            BSD
