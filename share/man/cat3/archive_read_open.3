ARCHIVE_READ_OPEN(3)     BSD Library Functions Manual     ARCHIVE_READ_OPEN(3)

NNAAMMEE
     aarrcchhiivvee__rreeaadd__ooppeenn, aarrcchhiivvee__rreeaadd__ooppeenn22, aarrcchhiivvee__rreeaadd__ooppeenn__ffdd,
     aarrcchhiivvee__rreeaadd__ooppeenn__FFIILLEE, aarrcchhiivvee__rreeaadd__ooppeenn__ffiilleennaammee,
     aarrcchhiivvee__rreeaadd__ooppeenn__mmeemmoorryy, -- functions for reading streaming archives

LLIIBBRRAARRYY
     Streaming Archive Library (libarchive, -larchive)

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<aarrcchhiivvee..hh>>

     _i_n_t
     aarrcchhiivvee__rreeaadd__ooppeenn(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _v_o_i_d _*_c_l_i_e_n_t___d_a_t_a,
         _a_r_c_h_i_v_e___o_p_e_n___c_a_l_l_b_a_c_k _*, _a_r_c_h_i_v_e___r_e_a_d___c_a_l_l_b_a_c_k _*,
         _a_r_c_h_i_v_e___c_l_o_s_e___c_a_l_l_b_a_c_k _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ooppeenn22(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _v_o_i_d _*_c_l_i_e_n_t___d_a_t_a,
         _a_r_c_h_i_v_e___o_p_e_n___c_a_l_l_b_a_c_k _*, _a_r_c_h_i_v_e___r_e_a_d___c_a_l_l_b_a_c_k _*,
         _a_r_c_h_i_v_e___s_k_i_p___c_a_l_l_b_a_c_k _*, _a_r_c_h_i_v_e___c_l_o_s_e___c_a_l_l_b_a_c_k _*);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ooppeenn__FFIILLEE(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _F_I_L_E _*_f_i_l_e);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ooppeenn__ffdd(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _i_n_t _f_d, _s_i_z_e___t _b_l_o_c_k___s_i_z_e);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ooppeenn__ffiilleennaammee(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _c_o_n_s_t _c_h_a_r _*_f_i_l_e_n_a_m_e,
         _s_i_z_e___t _b_l_o_c_k___s_i_z_e);

     _i_n_t
     aarrcchhiivvee__rreeaadd__ooppeenn__mmeemmoorryy(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _v_o_i_d _*_b_u_f_f, _s_i_z_e___t _s_i_z_e);

DDEESSCCRRIIPPTTIIOONN
     aarrcchhiivvee__rreeaadd__ooppeenn()
             The same as aarrcchhiivvee__rreeaadd__ooppeenn22(), except that the skip callback
             is assumed to be NULL.
     aarrcchhiivvee__rreeaadd__ooppeenn22()
             Freeze the settings, open the archive, and prepare for reading
             entries.  This is the most generic version of this call, which
             accepts four callback functions.  Most clients will want to use
             aarrcchhiivvee__rreeaadd__ooppeenn__ffiilleennaammee(), aarrcchhiivvee__rreeaadd__ooppeenn__FFIILLEE(),
             aarrcchhiivvee__rreeaadd__ooppeenn__ffdd(), or aarrcchhiivvee__rreeaadd__ooppeenn__mmeemmoorryy() instead.
             The library invokes the client-provided functions to obtain raw
             bytes from the archive.
     aarrcchhiivvee__rreeaadd__ooppeenn__FFIILLEE()
             Like aarrcchhiivvee__rreeaadd__ooppeenn(), except that it accepts a _F_I_L_E _*
             pointer.  This function should not be used with tape drives or
             other devices that require strict I/O blocking.
     aarrcchhiivvee__rreeaadd__ooppeenn__ffdd()
             Like aarrcchhiivvee__rreeaadd__ooppeenn(), except that it accepts a file descrip-
             tor and block size rather than a set of function pointers.  Note
             that the file descriptor will not be automatically closed at end-
             of-archive.  This function is safe for use with tape drives or
             other blocked devices.
     aarrcchhiivvee__rreeaadd__ooppeenn__ffiillee()
             This is a deprecated synonym for aarrcchhiivvee__rreeaadd__ooppeenn__ffiilleennaammee().
     aarrcchhiivvee__rreeaadd__ooppeenn__ffiilleennaammee()
             Like aarrcchhiivvee__rreeaadd__ooppeenn(), except that it accepts a simple file-
             name and a block size.  A NULL filename represents standard
             input.  This function is safe for use with tape drives or other
             blocked devices.
     aarrcchhiivvee__rreeaadd__ooppeenn__mmeemmoorryy()
             Like aarrcchhiivvee__rreeaadd__ooppeenn(), except that it accepts a pointer and
             size of a block of memory containing the archive data.

     A complete description of the struct archive and struct archive_entry
     objects can be found in the overview manual page for libarchive(3).

CCLLIIEENNTT CCAALLLLBBAACCKKSS
     The callback functions must match the following prototypes:

           _t_y_p_e_d_e_f _l_a___s_s_i_z_e___t aarrcchhiivvee__rreeaadd__ccaallllbbaacckk(_s_t_r_u_c_t _a_r_c_h_i_v_e _*,
           _v_o_i_d _*_c_l_i_e_n_t___d_a_t_a, _c_o_n_s_t _v_o_i_d _*_*_b_u_f_f_e_r)

           _t_y_p_e_d_e_f _l_a___i_n_t_6_4___t aarrcchhiivvee__sskkiipp__ccaallllbbaacckk(_s_t_r_u_c_t _a_r_c_h_i_v_e _*,
           _v_o_i_d _*_c_l_i_e_n_t___d_a_t_a, _o_f_f___t _r_e_q_u_e_s_t)

           _t_y_p_e_d_e_f _i_n_t aarrcchhiivvee__ooppeenn__ccaallllbbaacckk(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _v_o_i_d
           _*_c_l_i_e_n_t___d_a_t_a)

           _t_y_p_e_d_e_f _i_n_t aarrcchhiivvee__cclloossee__ccaallllbbaacckk(_s_t_r_u_c_t _a_r_c_h_i_v_e _*, _v_o_i_d
           _*_c_l_i_e_n_t___d_a_t_a)

     The open callback is invoked by aarrcchhiivvee__ooppeenn().  It should return
     AARRCCHHIIVVEE__OOKK if the underlying file or data source is successfully opened.
     If the open fails, it should call aarrcchhiivvee__sseett__eerrrroorr() to register an
     error code and message and return AARRCCHHIIVVEE__FFAATTAALL.

     The read callback is invoked whenever the library requires raw bytes from
     the archive.  The read callback should read data into a buffer, set the
     const void **buffer argument to point to the available data, and return a
     count of the number of bytes available.  The library will invoke the read
     callback again only after it has consumed this data.  The library imposes
     no constraints on the size of the data blocks returned.  On end-of-file,
     the read callback should return zero.  On error, the read callback should
     invoke aarrcchhiivvee__sseett__eerrrroorr() to register an error code and message and
     return -1.

     The skip callback is invoked when the library wants to ignore a block of
     data.  The return value is the number of bytes actually skipped, which
     may differ from the request.  If the callback cannot skip data, it should
     return zero.  If the skip callback is not provided (the function pointer
     is NULL ), the library will invoke the read function instead and simply
     discard the result.  A skip callback can provide significant performance
     gains when reading uncompressed archives from slow disk drives or other
     media that can skip quickly.

     The close callback is invoked by archive_close when the archive process-
     ing is complete.  The callback should return AARRCCHHIIVVEE__OOKK on success.  On
     failure, the callback should invoke aarrcchhiivvee__sseett__eerrrroorr() to register an
     error code and message and return AARRCCHHIIVVEE__FFAATTAALL..

RREETTUURRNN VVAALLUUEESS
     These functions return AARRCCHHIIVVEE__OOKK on success, or AARRCCHHIIVVEE__FFAATTAALL.

EERRRROORRSS
     Detailed error codes and textual descriptions are available from the
     aarrcchhiivvee__eerrrrnnoo() and aarrcchhiivvee__eerrrroorr__ssttrriinngg() functions.

SSEEEE AALLSSOO
     tar(1), libarchive(3), archive_read(3), archive_read_data(3),
     archive_read_filter(3), archive_read_format(3),
     archive_read_set_options(3), archive_util(3), tar(5)

BSD                            February 2, 2012                            BSD
