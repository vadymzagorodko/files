ARCHIVE_ENTRY_ACL(3)     BSD Library Functions Manual     ARCHIVE_ENTRY_ACL(3)

NNAAMMEE
     aarrcchhiivvee__eennttrryy__aaccll__aadddd__eennttrryy, aarrcchhiivvee__eennttrryy__aaccll__aadddd__eennttrryy__ww,
     aarrcchhiivvee__eennttrryy__aaccll__cclleeaarr, aarrcchhiivvee__eennttrryy__aaccll__ccoouunntt,
     aarrcchhiivvee__eennttrryy__aaccll__ffrroomm__tteexxtt, aarrcchhiivvee__eennttrryy__aaccll__ffrroomm__tteexxtt__ww,,
     aarrcchhiivvee__eennttrryy__aaccll__nneexxtt, aarrcchhiivvee__eennttrryy__aaccll__nneexxtt__ww,
     aarrcchhiivvee__eennttrryy__aaccll__rreesseett, aarrcchhiivvee__eennttrryy__aaccll__ttoo__tteexxtt,
     aarrcchhiivvee__eennttrryy__aaccll__ttoo__tteexxtt__ww, aarrcchhiivvee__eennttrryy__aaccll__ttyyppeess -- functions for
     manipulating Access Control Lists in archive entry descriptions

LLIIBBRRAARRYY
     Streaming Archive Library (libarchive, -larchive)

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<aarrcchhiivvee__eennttrryy..hh>>

     _v_o_i_d
     aarrcchhiivvee__eennttrryy__aaccll__aadddd__eennttrryy(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*_a, _i_n_t _t_y_p_e,
         _i_n_t _p_e_r_m_s_e_t, _i_n_t _t_a_g, _i_n_t _q_u_a_l_i_f_i_e_r, _c_o_n_s_t _c_h_a_r _*_n_a_m_e);

     _v_o_i_d
     aarrcchhiivvee__eennttrryy__aaccll__aadddd__eennttrryy__ww(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*_a, _i_n_t _t_y_p_e,
         _i_n_t _p_e_r_m_s_e_t, _i_n_t _t_a_g, _i_n_t _q_u_a_l_i_f_i_e_r, _c_o_n_s_t _w_c_h_a_r___t _*_n_a_m_e);

     _v_o_i_d
     aarrcchhiivvee__eennttrryy__aaccll__cclleeaarr(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*_a);

     _i_n_t
     aarrcchhiivvee__eennttrryy__aaccll__ccoouunntt(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*_a, _i_n_t _t_y_p_e);

     _i_n_t
     aarrcchhiivvee__eennttrryy__aaccll__ffrroomm__tteexxtt(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*_a, _c_o_n_s_t _c_h_a_r _*_t_e_x_t,
         _i_n_t _t_y_p_e);

     _i_n_t
     aarrcchhiivvee__eennttrryy__aaccll__ffrroomm__tteexxtt__ww(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*_a,
         _c_o_n_s_t _w_c_h_a_r___t _*_t_e_x_t, _i_n_t _t_y_p_e);

     _i_n_t
     aarrcchhiivvee__eennttrryy__aaccll__nneexxtt(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*_a, _i_n_t _t_y_p_e, _i_n_t _*_r_e_t___t_y_p_e,
         _i_n_t _*_r_e_t___p_e_r_m_s_e_t, _i_n_t _*_r_e_t___t_a_g, _i_n_t _*_r_e_t___q_u_a_l,
         _c_o_n_s_t _c_h_a_r _*_*_r_e_t___n_a_m_e);

     _i_n_t
     aarrcchhiivvee__eennttrryy__aaccll__nneexxtt__ww(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*_a, _i_n_t _t_y_p_e,
         _i_n_t _*_r_e_t___t_y_p_e, _i_n_t _*_r_e_t___p_e_r_m_s_e_t, _i_n_t _*_r_e_t___t_a_g, _i_n_t _*_r_e_t___q_u_a_l,
         _c_o_n_s_t _w_c_h_a_r___t _*_*_r_e_t___n_a_m_e);

     _i_n_t
     aarrcchhiivvee__eennttrryy__aaccll__rreesseett(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*_a, _i_n_t _t_y_p_e);

     _c_h_a_r _*
     aarrcchhiivvee__eennttrryy__aaccll__ttoo__tteexxtt(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*_a, _s_s_i_z_e___t _*_l_e_n___p,
         _i_n_t _f_l_a_g_s);

     _w_c_h_a_r___t _*
     aarrcchhiivvee__eennttrryy__aaccll__ttoo__tteexxtt__ww(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*_a, _s_s_i_z_e___t _*_l_e_n___p,
         _i_n_t _f_l_a_g_s);

     _i_n_t
     aarrcchhiivvee__eennttrryy__aaccll__ttyyppeess(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*_a);

DDEESSCCRRIIPPTTIIOONN
     The ``Access Control Lists (ACLs)'' extend the standard Unix perssion
     model.  The ACL interface of lliibbaarrcchhiivvee supports both POSIX.1e and NFSv4
     style ACLs. Use of ACLs is restricted by various levels of ACL support in
     operating systems, file systems and archive formats.

   PPOOSSIIXX..11ee AAcccceessss CCoonnttrrooll LLiissttss
     A POSIX.1e ACL consists of a number of independent entries.  Each entry
     specifies the permission set as bitmask of basic permissions.  Valid per-
     missions in the _p_e_r_m_s_e_t are:
           ARCHIVE_ENTRY_ACL_READ (rr)
           ARCHIVE_ENTRY_ACL_WRITE (ww)
           ARCHIVE_ENTRY_ACL_EXECUTE (xx)
     The permissions correspond to the normal Unix permissions.

     The _t_a_g specifies the principal to which the permission applies.  Valid
     values are:
           ARCHIVE_ENTRY_ACL_USER       The user specified by the name field.
           ARCHIVE_ENTRY_ACL_USER_OBJ   The owner of the file.
           ARCHIVE_ENTRY_ACL_GROUP      The group specied by the name field.
           ARCHIVE_ENTRY_ACL_GROUP_OBJ  The group who owns the file.
           ARCHIVE_ENTRY_ACL_MASK       The maximum permissions to be obtained
                                        via group permissions.
           ARCHIVE_ENTRY_ACL_OTHER      Any principal who is not file owner or
                                        a member of the owning group.

     The principals ARCHIVE_ENTRY_ACL_USER_OBJ, ARCHIVE_ENTRY_ACL_GROUP_OBJ
     and ARCHIVE_ENTRY_ACL_OTHER are equivalent to user, group and other in
     the classic Unix permission model and specify non-extended ACL entries.

     All files with have an access ACL (ARCHIVE_ENTRY_ACL_TYPE_ACCESS).  This
     specifies the permissions required for access to the file itself.  Direc-
     tories have an additional ACL (ARCHIVE_ENTRY_ACL_TYPE_DEFAULT), which
     controls the initial access ACL for newly created directory entries.

   NNFFSSvv44 AAcccceessss CCoonnttrrooll LLiissttss
     A NFSv4 ACL consists of multiple individual entries called Access Control
     Entries (ACEs).

     There are four possible types of a NFSv4 ACE:
           ARCHIVE_ENTRY_ACL_TYPE_ALLOW Allow principal to perform actions
                                        requiring given permissions.
           ARCHIVE_ENTRY_ACL_TYPE_DENY  Prevent principal from performing
                                        actions requiring given permissions.
           ARCHIVE_ENTRY_ACL_TYPE_AUDIT Log access attempts by principal which
                                        require given permissions.
           ARCHIVE_ENTRY_ACL_TYPE_ALARM Trigger a system alarm on access
                                        attempts by principal which require
                                        given permissions.

     The _t_a_g specifies the principal to which the permission applies.  Valid
     values are:
           ARCHIVE_ENTRY_ACL_USER       The user specified by the name field.
           ARCHIVE_ENTRY_ACL_USER_OBJ   The owner of the file.
           ARCHIVE_ENTRY_ACL_GROUP      The group specied by the name field.
           ARCHIVE_ENTRY_ACL_GROUP_OBJ  The group who owns the file.
           ARCHIVE_ENTRY_ACL_EVERYONE   Any principal who is not file owner or
                                        a member of the owning group.

     Entries with the ARCHIVE_ENTRY_ACL_USER or ARCHIVE_ENTRY_ACL_GROUP tag
     store the user and group name in the _n_a_m_e string and optionally the user
     or group ID in the _q_u_a_l_i_f_i_e_r integer.

     NFSv4 ACE permissions and flags are stored in the same _p_e_r_m_s_e_t bitfield.
     Some permissions share the same constant and permission character but
     have different effect on directories than on files. The following ACE
     permissions are supported:
           ARCHIVE_ENTRY_ACL_READ_DATA (rr)
                   Read data (file).
           ARCHIVE_ENTRY_ACL_LIST_DIRECTORY (rr)
                   List entries (directory).
           ARCHIVE_ENTRY_ACL_WRITE_DATA (ww)
                   Write data (file).
           ARCHIVE_ENTRY_ACL_ADD_FILE (ww)
                   Create files (directory).
           ARCHIVE_ENTRY_ACL_EXECUTE (xx)
                   Execute file or change into a directory.
           ARCHIVE_ENTRY_ACL_APPEND_DATA (pp)
                   Append data (file).
           ARCHIVE_ENTRY_ACL_ADD_SUBDIRECTORY (pp)
                   Create subdirectories (directory).
           ARCHIVE_ENTRY_ACL_DELETE_CHILD (DD)
                   Remove files and subdirectories inside a directory.
           ARCHIVE_ENTRY_ACL_DELETE (dd)
                   Remove file or directory.
           ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES (aa)
                   Read file or directory attributes.
           ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES (AA)
                   Write file or directory attributes.
           ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS (RR)
                   Read named file or directory attributes.
           ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS (WW)
                   Write named file or directory attributes.
           ARCHIVE_ENTRY_ACL_READ_ACL (cc)
                   Read file or directory ACL.
           ARCHIVE_ENTRY_ACL_WRITE_ACL (CC)
                   Write file or directory ACL.
           ARCHIVE_ENTRY_ACL_WRITE_OWNER (oo)
                   Change owner of a file or directory.
           ARCHIVE_ENTRY_ACL_SYNCHRONIZE (ss)
                   Use synchronous I/O.

     The following NFSv4 ACL inheritance flags are supported:
           ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT (ff)
                   Inherit parent directory ACE to files.
           ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT (dd)
                   Inherit parent directory ACE to subdirectories.
           ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY (ii)
                   Only inherit, do not apply the permission on the directory
                   itself.
           ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT (nn)
                   Do not propagate inherit flags. Only first-level entries
                   inherit ACLs.
           ARCHIVE_ENTRY_ACL_ENTRY_SUCCESSFUL_ACCESS (SS)
                   Trigger alarm or audit on succesful access.
           ARCHIVE_ENTRY_ACL_ENTRY_FAILED_ACCESS (FF)
                   Trigger alarm or audit on failed access.
           ARCHIVE_ENTRY_ACL_ENTRY_INHERITED (II)
                   Mark that ACE was inherited.

   FFuunnccttiioonnss
     aarrcchhiivvee__eennttrryy__aaccll__aadddd__eennttrryy() and aarrcchhiivvee__eennttrryy__aaccll__aadddd__eennttrryy__ww() add a
     single ACL entry.  For the access ACL and non-extended principals, the
     classic Unix permissions are updated. An archive enry cannot contain both
     POSIX.1e and NFSv4 ACL entries.

     aarrcchhiivvee__eennttrryy__aaccll__cclleeaarr() removes all ACL entries and resets the enumera-
     tion pointer.

     aarrcchhiivvee__eennttrryy__aaccll__ccoouunntt() counts the ACL entries that have the given type
     mask.  _t_y_p_e can be the bitwise-or of
           ARCHIVE_ENTRY_ACL_TYPE_ACCESS
           ARCHIVE_ENTRY_ACL_TYPE_DEFAULT
     for POSIX.1e ACLs and
           ARCHIVE_ENTRY_ACL_TYPE_ALLOW
           ARCHIVE_ENTRY_ACL_TYPE_DENY
           ARCHIVE_ENTRY_ACL_TYPE_AUDIT
           ARCHIVE_ENTRY_ACL_TYPE_ALARM
     for NFSv4 ACLs. For POSIX.1e ACLs if ARCHIVE_ENTRY_ACL_TYPE_ACCESS is
     included and at least one extended ACL entry is found, the three non-
     extened ACLs are added.

     aarrcchhiivvee__eennttrryy__aaccll__ffrroomm__tteexxtt() and aarrcchhiivvee__eennttrryy__aaccll__ffrroomm__tteexxtt__ww() add new
     (or merge with existing) ACL entries from (wide) text. The argument _t_y_p_e
     may take one of the following values:
           ARCHIVE_ENTRY_ACL_TYPE_ACCESS
           ARCHIVE_ENTRY_ACL_TYPE_DEFAULT
           ARCHIVE_ENTRY_ACL_TYPE_NFS4
     Supports all formats that can be created with aarrcchhiivvee__eennttrryy__aaccll__ttoo__tteexxtt()
     or respective aarrcchhiivvee__eennttrryy__aaccll__ttoo__tteexxtt__ww().  Existing ACL entries are
     preserved. To get a clean new ACL from text aarrcchhiivvee__eennttrryy__aaccll__cclleeaarr()
     must be called first. Entries prefixed with ``default:'' are treated as
     ARCHIVE_ENTRY_ACL_TYPE_DEFAULT unless _t_y_p_e is
     ARCHIVE_ENTRY_ACL_TYPE_NFS4.  Invalid entries, non-parseable ACL entries
     and entries beginning with the `#' character (comments) are skipped.

     aarrcchhiivvee__eennttrryy__aaccll__nneexxtt() and aarrcchhiivvee__eennttrryy__aaccll__nneexxtt__ww() return the next
     entry of the ACL list.  This functions may only be called after
     aarrcchhiivvee__eennttrryy__aaccll__rreesseett() has indicated the presence of extended ACL
     entries.

     aarrcchhiivvee__eennttrryy__aaccll__rreesseett() prepare reading the list of ACL entries with
     aarrcchhiivvee__eennttrryy__aaccll__nneexxtt() or aarrcchhiivvee__eennttrryy__aaccll__nneexxtt__ww().  The function
     returns either 0, if no non-extended ACLs are found.  In this case, the
     access permissions should be obtained by archive_entry_mode(3) or set
     using chmod(2).  Otherwise, the function returns the same value as
     aarrcchhiivvee__eennttrryy__aaccll__ccoouunntt().

     aarrcchhiivvee__eennttrryy__aaccll__ttoo__tteexxtt() and aarrcchhiivvee__eennttrryy__aaccll__ttoo__tteexxtt__ww() convert the
     ACL entries for the given type into a (wide) string of ACL entries sepa-
     rated by newline. If the the pointer _l_e_n___p is not NULL, then the function
     shall return the length of the string (not including the NULL terminator)
     in the location pointed to by _l_e_n___p.  The _f_l_a_g argument is a bitwise-or.

     The following flags are effective only on POSIX.1e ACL:
           ARCHIVE_ENTRY_ACL_TYPE_ACCESS
                   Output access ACLs.
           ARCHIVE_ENTRY_ACL_TYPE_DEFAULT
                   Output POSIX.1e default ACLs.
           ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT
                   Prefix each default ACL entry with the word ``default:''.
           ARCHIVE_ENTRY_ACL_STYLE_SOLARIS
                   The mask and other ACLs don not contain a double colon.

     The following flags are effecive only on NFSv4 ACL:
           ARCHIVE_ENTRY_ACL_STYLE_COMPACT
                   Do not output minus characters for unset permissions and
                   flags in NFSv4 ACL permission and flag fields.

     The following flags are effective on both POSIX.1e and NFSv4 ACL:
           ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID
                   Add an additional colon-separated field containing the user
                   or group id.
           ARCHIVE_ENTRY_ACL_STYLE_SEPARATOR_COMMA
                   Separate ACL entries with comma instead of newline.

     If the archive entry contains NFSv4 ACLs, all types of NFSv4 ACLs are
     returned.  It the entry contains POSIX.1e ACLs and none of the flags
     ARCHIVE_ENTRY_ACL_TYPE_ACCESS or ARCHIVE_ENTRY_ACL_TYPE_DEFAULT are spec-
     ified, both access and default entries are returned and default entries
     are prefixed with ``default:''.

     aarrcchhiivvee__eennttrryy__aaccll__ttyyppeess() get ACL entry types contained in an archive
     entry's ACL. As POSIX.1e and NFSv4 ACL entries cannot be mixed, this
     function is a very efficient way to detect if an ACL already contains
     POSIX.1e or NFSv4 ACL entries.

RREETTUURRNN VVAALLUUEESS
     aarrcchhiivvee__eennttrryy__aaccll__ccoouunntt() and aarrcchhiivvee__eennttrryy__aaccll__rreesseett() returns the num-
     ber of ACL entries that match the given type mask.  For POSIX.1e ACLS if
     the type mask includes ARCHIVE_ENTRY_ACL_TYPE_ACCESS and at least one
     extended ACL entry exists, the three classic Unix permissions are
     counted.

     aarrcchhiivvee__eennttrryy__aaccll__ffrroomm__tteexxtt() and aarrcchhiivvee__eennttrryy__aaccll__ffrroomm__tteexxtt__ww() return
     ARCHIVE_OK if all entries were successfully parsed and ARCHIVE_WARN if
     one or more entries were invalid or non-parseable.

     aarrcchhiivvee__eennttrryy__aaccll__nneexxtt() and aarrcchhiivvee__eennttrryy__aaccll__nneexxtt__ww() return ARCHIVE_OK
     on success, ARCHIVE_EOF if no more ACL entries exist and ARCHIVE_WARN if
     aarrcchhiivvee__eennttrryy__aaccll__rreesseett() has not been called first.

     aarrcchhiivvee__eennttrryy__aaccll__ttoo__tteexxtt() returns a string representing the ACL entries
     matching the given type and flags on success or NULL on error.

     aarrcchhiivvee__eennttrryy__aaccll__ttoo__tteexxtt__ww() returns a wide string representing the ACL
     entries matching the given type and flags on success or NULL on error.

     aarrcchhiivvee__eennttrryy__aaccll__ttyyppeess() returns a bitmask of ACL entry types or 0 if
     archive entry has no ACL entries.

SSEEEE AALLSSOO
     archive_entry(3), libarchive(3)

BSD                            February 15, 2017                           BSD
