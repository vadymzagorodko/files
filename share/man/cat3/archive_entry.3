ARCHIVE_ENTRY(3)         BSD Library Functions Manual         ARCHIVE_ENTRY(3)

NNAAMMEE
     aarrcchhiivvee__eennttrryy__cclleeaarr, aarrcchhiivvee__eennttrryy__cclloonnee, aarrcchhiivvee__eennttrryy__ffrreeee,
     aarrcchhiivvee__eennttrryy__nneeww, -- functions for managing archive entry descriptions

LLIIBBRRAARRYY
     Streaming Archive Library (libarchive, -larchive)

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<aarrcchhiivvee__eennttrryy..hh>>

     _s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*
     aarrcchhiivvee__eennttrryy__cclleeaarr(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*);

     _s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*
     aarrcchhiivvee__eennttrryy__cclloonnee(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*);

     _v_o_i_d
     aarrcchhiivvee__eennttrryy__ffrreeee(_s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*);

     _s_t_r_u_c_t _a_r_c_h_i_v_e___e_n_t_r_y _*
     aarrcchhiivvee__eennttrryy__nneeww(_v_o_i_d);

DDEESSCCRRIIPPTTIIOONN
     These functions create and manipulate data objects that represent entries
     within an archive.  You can think of a struct archive_entry as a heavy-
     duty version of struct stat: it includes everything from struct stat plus
     associated pathname, textual group and user names, etc.  These objects
     are used by libarchive(3) to represent the metadata associated with a
     particular entry in an archive.

   CCrreeaattee aanndd DDeessttrrooyy
     There are functions to allocate, destroy, clear, and copy _a_r_c_h_i_v_e___e_n_t_r_y
     objects:
     aarrcchhiivvee__eennttrryy__cclleeaarr()
             Erases the object, resetting all internal fields to the same
             state as a newly-created object.  This is provided to allow you
             to quickly recycle objects without thrashing the heap.
     aarrcchhiivvee__eennttrryy__cclloonnee()
             A deep copy operation; all text fields are duplicated.
     aarrcchhiivvee__eennttrryy__ffrreeee()
             Releases the struct archive_entry object.
     aarrcchhiivvee__eennttrryy__nneeww()
             Allocate and return a blank struct archive_entry object.

   FFuunnccttiioonn ggrroouuppss
     Due to high number of functions, the accessor functions can be found in
     man pages grouped by the purpose.

     archive_entry_acl(3)    Access Control List manipulation

     archive_entry_paths(3)  Path name manipulation

     archive_entry_perms(3)  User, group and mode manipulation

     archive_entry_stat(3)   Functions not in the other groups and copying
                             to/from _s_t_r_u_c_t _s_t_a_t.

     archive_entry_time(3)   Time field manipulation

     Most of the functions set or read entries in an object.  Such functions
     have one of the following forms:
     aarrcchhiivvee__eennttrryy__sseett__XXXXXXXX()
             Stores the provided data in the object.  In particular, for
             strings, the pointer is stored, not the referenced string.
     aarrcchhiivvee__eennttrryy__ccooppyy__XXXXXXXX()
             As above, except that the referenced data is copied into the
             object.
     aarrcchhiivvee__eennttrryy__XXXXXXXX()
             Returns the specified data.  In the case of strings, a const-
             qualified pointer to the string is returned.
     String data can be set or accessed as wide character strings or normal
     _c_h_a_r strings.  The functions that use wide character strings are suffixed
     with __ww.  Note that these are different representations of the same data:
     For example, if you store a narrow string and read the corresponding wide
     string, the object will transparently convert formats using the current
     locale.  Similarly, if you store a wide string and then store a narrow
     string for the same data, the previously-set wide string will be dis-
     carded in favor of the new data.

SSEEEE AALLSSOO
     archive_entry_acl(3), archive_entry_paths(3), archive_entry_perms(3),
     archive_entry_time(3) libarchive(3),

HHIISSTTOORRYY
     The lliibbaarrcchhiivvee library first appeared in FreeBSD 5.3.

AAUUTTHHOORRSS
     The lliibbaarrcchhiivvee library was written by Tim Kientzle <kientzle@acm.org>.

BSD                            Feburary 2, 2012                            BSD
